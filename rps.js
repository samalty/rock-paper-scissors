// Cache the DOM by establishing variables

var userScore = 0;
var computerScore = 0;

// Use 'const' for variables which aren't prone to change

const userScore_span = document.getElementById('user-score');
const computerScore_span = document.getElementById('computer-score');
const scores_div = document.querySelector('.scores');
const result_p = document.querySelector('.result > p');

const rock_button = document.getElementById('rock');
const paper_button = document.getElementById('paper');
const scissors_button = document.getElementById('scissors');
const reset_button = document.getElementById('reset');

function getComputerChoice(){
    const options = ['Rock', 'Paper', 'Scissors'];
    // 'floor' rounds all numbers down to the nearest whole number, resulting in either 0, 1 or 2
    const randomSelection = Math.floor(Math.random() * 3);
    // randomSelection is called within options, to return a random output
    return options[randomSelection]
}

function user_win(userChoice, computerChoice){
    userScore++;
    // Using userScore_span variable alongside 'innerHTML' updates score in the browser
    userScore_span.innerHTML = userScore;
    computerScore_span.innerHTML = computerScore;
    result_p.innerHTML = userChoice + " beats " + computerChoice + ". You win!";
    // classList.add function applies relevant css styling to the chosen element, timeout removes it after one second
    document.getElementById(userChoice).classList.add('win-border');
    setTimeout(function(){ document.getElementById('userChoice').classList.remove('win-border') }, 1000);
}

function computer_win(userChoice, computerChoice){
    computerScore++;
    userScore_span.innerHTML = userScore;
    computerScore_span.innerHTML = computerScore;
    result_p.innerHTML = computerChoice + " beats " + userChoice + ". You lose!";
    document.getElementById(userChoice).classList.add('lose-border');
    setTimeout(function(){ document.getElementById('userChoice').classList.remove('lose-border') }, 1000);
}

function tie(userChoice, computerChoice){
    result_p.innerHTML = userChoice + " and " + computerChoice + " are the same. It's a tie.";
}

function game(userChoice){
    // Create a new variable, the output being generated by the above function
    const computerChoice = getComputerChoice();
    
    // 'switch' statement is a more concise alternative to an 'if, else' statement
    switch (userChoice + computerChoice) {
        case 'PaperRock':
        case 'RockScissors':
        case 'ScissorsPaper':
            user_win(userChoice, computerChoice);
            break;
        case 'RockPaper':
        case 'ScissorsRock':
        case 'PaperScissors':
            computer_win(userChoice, computerChoice);
            break;
        case 'RockRock':
        case 'ScissorsScissors':
        case 'PaperPaper':
            tie(userChoice, computerChoice);
            break;
    }
}

function main(){
    // Add event listeners to call on functions when buttons are clicked
    rock_button.addEventListener('click', function(){
        // On click, call the game function with 'rock' argument
        game('Rock');
    });

    paper_button.addEventListener('click', function(){
        game('Paper');
    });

    scissors_button.addEventListener('click', function(){
        game('Scissors');
    });
    
    reset_button.addEventListener('click', function(){
        userScore = 0;
        computerScore = 0;
        userScore_span.innerHTML = userScore;
        computerScore_span.innerHTML = computerScore;
        result_p.innerHTML = "The game has been reset";
    });
}

// Call the main function, including all functions held within it
main();